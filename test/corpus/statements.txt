==================
returnStmt
==================

return
return true
return 
  true

---

(module
  (stmt
    (returnStmt
      (keyw)))
  (stmt
    (returnStmt
      (keyw)
      (expr
        (primary
          (literal
            (bool_lit))))))
  (stmt
    (returnStmt
      (keyw)
      (expr
        (primary
          (literal
            (bool_lit)))))))

==================
raiseStmt
==================

raise
raise true
raise 
  true

---

(module
  (stmt
    (raiseStmt
      (keyw)))
  (stmt
    (raiseStmt
      (keyw)
      (expr
        (primary
          (literal
            (bool_lit))))))
  (stmt
    (raiseStmt
      (keyw)
      (expr
        (primary
          (literal
            (bool_lit)))))))

==================
yieldStmt
==================

yield
yield true
yield 
  true

---

(module
  (stmt
    (yieldStmt
      (keyw)))
  (stmt
    (yieldStmt
      (keyw)
      (expr
        (primary
          (literal
            (bool_lit))))))
  (stmt
    (yieldStmt
      (keyw)
      (expr
        (primary
          (literal
            (bool_lit)))))))

==================
discardStmt
==================

discard
discard true
discard 
  true

---

(module
  (stmt
    (discardStmt
      (keyw)))
  (stmt
    (discardStmt
      (keyw)
      (expr
        (primary
          (literal
            (bool_lit))))))
  (stmt
    (discardStmt
      (keyw)
      (expr
        (primary
          (literal
            (bool_lit)))))))

==================
breakStmt
==================

break
break true
break 
  true

---

(module
  (stmt
    (breakStmt
      (keyw)))
  (stmt
    (breakStmt
      (keyw)
      (expr
        (primary
          (literal
            (bool_lit))))))
  (stmt
    (breakStmt
      (keyw)
      (expr
        (primary
          (literal
            (bool_lit)))))))

==================
continueStmt
==================

continue
continue true
continue 
  true

---

(module
  (stmt
    (continueStmt
      (keyw)))
  (stmt
    (continueStmt
      (keyw)
      (expr
        (primary
          (literal
            (bool_lit))))))
  (stmt
    (continueStmt
      (keyw)
      (expr
        (primary
          (literal
            (bool_lit)))))))

==================
pragmaStmt
==================

{.pragma: rtl, exportc, dynlib, cdecl.}: discard true
{.
  pragma: rtl,
  importc,
  dynlib: "client.dll",
  cdecl
  .}
{. pragma: rtl, importc,
  dynlib: "client.dll",
  cdecl}:
    discard true; discard true


---

(module
  (stmt
    (pragmaStmt
      (pragma
        (exprColonEqExpr
          (expr
            (primary
              (symbol
                (ident))))
          (expr
            (primary
              (symbol
                (ident)))))
        (exprColonEqExpr
          (expr
            (primary
              (symbol
                (ident)))))
        (exprColonEqExpr
          (expr
            (primary
              (symbol
                (ident)))))
        (exprColonEqExpr
          (expr
            (primary
              (symbol
                (ident))))))
      (block
        (discardStmt
          (keyw)
          (expr
            (primary
              (literal
                (bool_lit))))))))
  (stmt
    (pragmaStmt
      (pragma
        (exprColonEqExpr
          (expr
            (primary
              (symbol
                (ident))))
          (expr
            (primary
              (symbol
                (ident)))))
        (exprColonEqExpr
          (expr
            (primary
              (symbol
                (ident)))))
        (exprColonEqExpr
          (expr
            (primary
              (symbol
                (ident))))
          (expr
            (primary
              (literal
                (str_lit)))))
        (exprColonEqExpr
          (expr
            (primary
              (symbol
                (ident))))))))
  (stmt
    (pragmaStmt
      (pragma
        (exprColonEqExpr
          (expr
            (primary
              (symbol
                (ident))))
          (expr
            (primary
              (symbol
                (ident)))))
        (exprColonEqExpr
          (expr
            (primary
              (symbol
                (ident)))))
        (exprColonEqExpr
          (expr
            (primary
              (symbol
                (ident))))
          (expr
            (primary
              (literal
                (str_lit)))))
        (exprColonEqExpr
          (expr
            (primary
              (symbol
                (ident))))))
      (block
        (stmt
          (discardStmt
            (keyw)
            (expr
              (primary
                (literal
                  (bool_lit)))))
          (discardStmt
            (keyw)
            (expr
              (primary
                (literal
                  (bool_lit))))))))))

==================
ifStmt
==================

if true: 
  discard true; discard true
elif true:
  discard true
  discard true;
  discard true
elif true: discard true
else : discard true
if true: discard true
if true: discard true
else: 
  discard true

---

(module
  (stmt
    (ifStmt
      (expr
        (primary
          (literal
            (bool_lit))))
      (block
        (stmt
          (discardStmt
            (keyw)
            (expr
              (primary
                (literal
                  (bool_lit)))))
          (discardStmt
            (keyw)
            (expr
              (primary
                (literal
                  (bool_lit)))))))
      (elifStmt
        (keyw)
        (expr
          (primary
            (literal
              (bool_lit))))
        (block
          (stmt
            (discardStmt
              (keyw)
              (expr
                (primary
                  (literal
                    (bool_lit))))))
          (stmt
            (discardStmt
              (keyw)
              (expr
                (primary
                  (literal
                    (bool_lit))))))
          (stmt
            (discardStmt
              (keyw)
              (expr
                (primary
                  (literal
                    (bool_lit))))))))
      (elifStmt
        (keyw)
        (expr
          (primary
            (literal
              (bool_lit))))
        (block
          (discardStmt
            (keyw)
            (expr
              (primary
                (literal
                  (bool_lit)))))))
      (elseStmt
        (keyw)
        (block
          (discardStmt
            (keyw)
            (expr
              (primary
                (literal
                  (bool_lit)))))))))
  (stmt
    (ifStmt
      (expr
        (primary
          (literal
            (bool_lit))))
      (block
        (discardStmt
          (keyw)
          (expr
            (primary
              (literal
                (bool_lit))))))))
  (stmt
    (ifStmt
      (expr
        (primary
          (literal
            (bool_lit))))
      (block
        (discardStmt
          (keyw)
          (expr
            (primary
              (literal
                (bool_lit))))))
      (elseStmt
        (keyw)
        (block
          (stmt
            (discardStmt
              (keyw)
              (expr
                (primary
                  (literal
                    (bool_lit)))))))))))

==================
caseStmt
==================

case a:
of 0:
  discard true; discard true; discard true
of 1, 3:
  discard true
elif true:
  discard true
else:
  discard true
  discard true
case a:
  of 0: discard true
  elif true:
    discard true

---

(module
  (stmt
    (caseStmt
      (expr
        (primary
          (symbol
            (ident))))
      (ofBranch
        (exprList
          (expr
            (primary
              (literal
                (int_lit)))))
        (block
          (stmt
            (discardStmt
              (keyw)
              (expr
                (primary
                  (literal
                    (bool_lit)))))
            (discardStmt
              (keyw)
              (expr
                (primary
                  (literal
                    (bool_lit)))))
            (discardStmt
              (keyw)
              (expr
                (primary
                  (literal
                    (bool_lit))))))))
      (ofBranch
        (exprList
          (expr
            (primary
              (literal
                (int_lit))))
          (expr
            (primary
              (literal
                (int_lit)))))
        (block
          (stmt
            (discardStmt
              (keyw)
              (expr
                (primary
                  (literal
                    (bool_lit))))))))
      (elifStmt
        (keyw)
        (expr
          (primary
            (literal
              (bool_lit))))
        (block
          (stmt
            (discardStmt
              (keyw)
              (expr
                (primary
                  (literal
                    (bool_lit))))))))
      (elseStmt
        (keyw)
        (block
          (stmt
            (discardStmt
              (keyw)
              (expr
                (primary
                  (literal
                    (bool_lit))))))
          (stmt
            (discardStmt
              (keyw)
              (expr
                (primary
                  (literal
                    (bool_lit))))))))))
  (stmt
    (caseStmt
      (expr
        (primary
          (symbol
            (ident))))
      (ofBranch
        (exprList
          (expr
            (primary
              (literal
                (int_lit)))))
        (block
          (discardStmt
            (keyw)
            (expr
              (primary
                (literal
                  (bool_lit)))))))
      (elifStmt
        (keyw)
        (expr
          (primary
            (literal
              (bool_lit))))
        (block
          (stmt
            (discardStmt
              (keyw)
              (expr
                (primary
                  (literal
                    (bool_lit)))))))))))

