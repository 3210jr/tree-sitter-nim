* bool literal isn't mentioned
* `IND` without curly braces / optInd is not explained exactly
* COMMENT should be defined as the doc string comment
* for expression isn't explained in the manual
* ^+ and ^* is not defined to include and optional trailing separator, but
in reality it does, eg: simpleStmt ^+ ';'
* `expr` definition contains `caseStmt` which is inconsistent, because eg 
forStmt was renamed to forExpr just for that
* in import statements, when using `/` eg `std/strutils`, does `/` compile as an
operator?
* pragmaStmt, importStmt, exportStmt, fromStmt and includeStmt call for optInd but really there is no whitespace
enforement on the compiler side
eg:
```
import std/strutils 
      except
  substr, substr
```
compiles just fine

* the current definition of module and stmt:
```
module = stmt ^* (';' / IND{=})
stmt = (IND{>} complexOrSimpleStmt^+(IND{=} / ';') DED)
     / simpleStmt ^+ ';'
```
strictly requires IND{>} and DED around a complexOrSimpleStmt
and makes a nim file like this:
```nim
let a = 9
```
impossible
* the way ifExpr is defined 
```
condExpr = expr colcom expr optInd
        ('elif' expr colcom expr optInd)*
         'else' colcom expr
ifExpr = 'if' condExpr
```
is completely wrong, since 
```
discard if true:
  true
else :
  echo "hi"
  true
```
is valid syntax, but in the definition it allows only a single `expr` per block.
so it should be more like this:
```
condExpr = expr colcom stmt 
        ('elif' expr colcom stmt)*
         'else' colcom stmt
```
which looks an awful lot like `condStmt`, so why not just do
`ifExpr = ifStmt`, like you did with `forExpr`?
* `caseStmt` only appears as part of an `expr`, there is no definition for a 
normal `caseStmt`
* `blockStmt` and `blockExpr` are excactly the same. why not define one with the other, like with the forStmt
*
```
declColonEquals = identWithPragma (comma identWithPragma)* comma?
                  (':' optInd typeDesc)? ('=' optInd expr)?
```
this could  be shortened to
```
declColonEquals = identWithPragma ^+ comma
                  (':' optInd typeDesc)? ('=' optInd expr)?
```
* experimental feature: parameter constraints are not mentioned in the syntax, even though term rewriting macros are (called 'pattern')
* the definition of `variable` doesn't allow for pragmas like so:
```nim
var x {.deprecated.}: char
```
since it uses `identColonEquals`
